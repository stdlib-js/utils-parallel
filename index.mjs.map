{"version":3,"file":"index.mjs","sources":["../lib/defaults.js","../lib/validate.js","../lib/node/exec.js","../e39f5c5fcc0df256958d94e60006fb","../lib/node/index.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numCPUs = require( '@stdlib/os-num-cpus' );\n\n\n// MAIN //\n\nvar defaults = {};\n\n// Number of workers:\ndefaults.workers = numCPUs - 1;\n\n// Number of scripts to execute concurrently:\ndefaults.concurrency = defaults.workers;\n\n// Executable file/command:\ndefaults.cmd = 'node';\n\n// Boolean indicating whether script output can be interleaved or must be ordered:\ndefaults.ordered = false;\n\n// Process user identity:\ndefaults.uid = null;\n\n// Process group identity:\ndefaults.gid = null;\n\n// `stdio` encoding:\ndefaults.encoding = 'buffer';\n\n// Max child process `stdio` buffer size:\ndefaults.maxBuffer = 200 * 1024 * 1024; // bytes\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {string} [options.cmd] - executable file/command\n* @param {PositiveInteger} [options.concurrency] - number of scripts to execute concurrently\n* @param {PositiveInteger} [options.workers] - number of workers\n* @param {boolean} [options.ordered] - boolean indicating whether to preserve the order of script output\n* @param {NonNegativeInteger} [options.uid] - process user identity\n* @param {NonNegativeInteger} [options.gid] - process group identity\n* @param {NonNegativeInteger} [options.maxBuffer] - max child process `stdio` buffer size\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'concurrency': 4,\n*     'workers': 2\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'concurrency' ) ) {\n\t\topts.concurrency = options.concurrency;\n\t\tif ( !isPositiveInteger( opts.concurrency ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'concurrency', opts.concurrency ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'workers' ) ) {\n\t\topts.workers = options.workers;\n\t\tif ( !isPositiveInteger( opts.workers ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'workers', opts.workers ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'cmd' ) ) {\n\t\topts.cmd = options.cmd;\n\t\tif ( !isString( opts.cmd ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'cmd', opts.cmd ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ordered' ) ) {\n\t\topts.ordered = options.ordered;\n\t\tif ( !isBoolean( opts.ordered ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'ordered', opts.ordered ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'uid' ) ) {\n\t\topts.uid = options.uid;\n\t\tif ( !isNonNegativeInteger( opts.uid ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'uid', opts.uid ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'gid' ) ) {\n\t\topts.gid = options.gid;\n\t\tif ( !isNonNegativeInteger( opts.gid ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'gid', opts.gid ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'maxBuffer' ) ) {\n\t\topts.maxBuffer = options.maxBuffer;\n\t\tif ( !isNonNegativeInteger( opts.maxBuffer ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'maxBuffer', opts.maxBuffer ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fork = require( 'child_process' ).fork;\nvar path = require( 'path' );\nvar logger = require( 'debug' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar format = require( '@stdlib/string-format' );\nvar getOpts = require( './options.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'parallel:exec' );\nvar WORKER_FILEPATH = path.resolve( __dirname, './worker/index.js' );\n\n\n// MAIN //\n\n/**\n* Executes scripts in parallel.\n*\n* @private\n* @param {StringArray} files - script absolute file paths\n* @param {Options} opts - options\n* @param {PositiveInteger} opts.concurrency - number of scripts to execute concurrently\n* @param {PositiveInteger} opts.workers - number of workers\n* @param {string} opts.cmd - executable file/command\n* @param {boolean} opts.ordered - boolean indicating whether to preserve order of script output\n* @param {(NonNegativeInteger|null)} opts.uid - process user identity\n* @param {(NonNegativeInteger|null)} opts.gid - process group identity\n* @param {string} opts.encoding - `stdio` encoding\n* @param {NonNegativeInteger} opts.maxBuffer - max child process `stdio` buffer size\n* @param {Callback} clbk - callback to invoke after executing all scripts\n*/\nfunction exec( files, opts, clbk ) {\n\tvar numClosed;\n\tvar workers;\n\tvar pending;\n\tvar fopts;\n\tvar args;\n\tvar proc;\n\tvar pids;\n\tvar pid;\n\tvar idx;\n\tvar err;\n\tvar i;\n\n\tdebug( 'Options: %s.', JSON.stringify( opts ) );\n\tnumClosed = 0;\n\n\tdebug( 'Creating %d workers...', opts.workers );\n\tworkers = {};\n\targs = [];\n\tfopts = getOpts( opts );\n\tfor ( i = 0; i < opts.workers; i++ ) {\n\t\tdebug( 'Creating child process...' );\n\t\tproc = fork( WORKER_FILEPATH, args, fopts );\n\n\t\tproc.on( 'error', onError( proc ) );\n\t\tproc.on( 'close', onClose( proc ) );\n\t\tproc.on( 'exit', onExit( proc ) );\n\t\tproc.on( 'disconnect', onDisconnect( proc ) );\n\t\tproc.on( 'message', onMessage( proc ) );\n\n\t\tdebug( 'Child process created. pid: %d.', proc.pid );\n\t\tworkers[ proc.pid ] = proc;\n\t}\n\tpids = objectKeys( workers );\n\tdebug( '%d workers created.', pids.length );\n\n\tdebug( 'Running %d scripts concurrently...', opts.concurrency );\n\tpending = {};\n\tidx = -1;\n\tfor ( i = 0; i < opts.concurrency; i++ ) {\n\t\tpid = pids[ i%pids.length ];\n\t\tnext( workers[ pid ] ); // eslint-disable-line node/callback-return\n\t}\n\n\t/**\n\t* Instructs a child process to run the next script.\n\t*\n\t* @private\n\t* @param {Object} child - child process\n\t* @returns {void}\n\t*/\n\tfunction next( child ) {\n\t\tvar numPending;\n\t\tidx += 1;\n\t\tif ( idx >= files.length ) {\n\t\t\tnumPending = objectKeys( pending ).length;\n\t\t\tif ( numPending > 0 ) {\n\t\t\t\tdebug( '%d scripts are pending.', numPending );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdebug( 'All scripts have finished.' );\n\t\t\treturn close();\n\t\t}\n\t\tdebug( 'Instructing child process to run script: %s. pid: %d.', files[ idx ], child.pid );\n\t\tchild.send( files[ idx ] );\n\t\tpending[ files[ idx ] ] = true;\n\n\t\tdebug( '%d of %d scripts have been processed.', idx, files.length );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon receiving a message from a child process.\n\t*\n\t* @private\n\t* @param {Object} child - child process\n\t* @returns {Callback} callback\n\t*/\n\tfunction onMessage( child ) {\n\t\treturn listener;\n\n\t\t/**\n\t\t* Callback invoked upon receiving a message from a child process.\n\t\t*\n\t\t* @private\n\t\t* @param {string} filepath - script filepath\n\t\t*/\n\t\tfunction listener( filepath ) {\n\t\t\tdebug( 'Child process message: %s. pid: %d.', filepath, child.pid );\n\n\t\t\t// Remove the script from the listing of pending scripts:\n\t\t\tdelete pending[ filepath ];\n\n\t\t\t// Indicate that the child process is ready for its next task:\n\t\t\tnext( child );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon child process close.\n\t*\n\t* @private\n\t* @param {Object} child - child process\n\t* @returns {Callback} callback\n\t*/\n\tfunction onClose( child ) {\n\t\treturn listener;\n\n\t\t/**\n\t\t* Callback invoked upon child process close.\n\t\t*\n\t\t* @private\n\t\t* @param {(number|null)} code - exit code\n\t\t* @param {(string|null)} signal - termination signal\n\t\t*/\n\t\tfunction listener( code, signal ) {\n\t\t\tdebug( 'Child process closed. Code: %d. Signal: %s. pid: %d.', code, signal, child.pid );\n\t\t\tprocessExit( code, signal );\n\t\t\tchildClosed();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked if a child closes.\n\t*\n\t* @private\n\t*/\n\tfunction childClosed() {\n\t\tnumClosed += 1;\n\t\tdebug( '%d of %d child processes have closed.', numClosed, opts.workers );\n\t\tif ( numClosed === opts.workers ) {\n\t\t\tdone(); // eslint-disable-line node/callback-return\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon child process exit.\n\t*\n\t* @private\n\t* @param {Object} child - child process\n\t* @returns {Callback} callback\n\t*/\n\tfunction onExit( child ) {\n\t\treturn listener;\n\n\t\t/**\n\t\t* Callback invoked upon child process exit.\n\t\t*\n\t\t* @private\n\t\t* @param {(number|null)} code - exit code\n\t\t* @param {(string|null)} signal - termination signal\n\t\t*/\n\t\tfunction listener( code, signal ) {\n\t\t\tdebug( 'Child process exited. Code: %d. Signal: %s. pid: %d.', code, signal, child.pid );\n\t\t\tprocessExit( code, signal );\n\t\t}\n\t}\n\n\t/**\n\t* Closes all workers.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t*/\n\tfunction close( error ) {\n\t\tvar pids;\n\t\tvar pid;\n\t\tvar i;\n\t\tif ( error && !err ) {\n\t\t\terr = error;\n\t\t}\n\t\tdebug( 'Instructing child processes to close...' );\n\t\tpids = objectKeys( workers );\n\t\tfor ( i = 0; i < pids.length; i++ ) {\n\t\t\tpid = pids[ i ];\n\t\t\tdebug( 'Instructing child process (pid: %d) to close...', pid );\n\t\t\tworkers[ pid ].send( 'close' );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon child process disconnect.\n\t*\n\t* @private\n\t* @param {Object} child - child process\n\t* @returns {Callback} callback\n\t*/\n\tfunction onDisconnect( child ) {\n\t\treturn listener;\n\n\t\t/**\n\t\t* Callback invoked upon child process disconnect.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction listener() {\n\t\t\tdebug( 'Child process disconnected. pid: %d.', child.pid );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon encountering a child process error.\n\t*\n\t* @private\n\t* @param {Object} child - child process\n\t* @returns {Callback} callback\n\t*/\n\tfunction onError( child ) {\n\t\treturn listener;\n\n\t\t/**\n\t\t* Callback invoked upon a child process error.\n\t\t*\n\t\t* @private\n\t\t* @param {Error} error - error object\n\t\t*/\n\t\tfunction listener( error ) {\n\t\t\tdebug( 'Child process error: %s. pid: %d.', error.message, child.pid );\n\t\t\tclose( error );\n\t\t}\n\t}\n\n\t/**\n\t* Processes process exit values. If provided a non-zero exit code or termination signal, instructs the process to close.\n\t*\n\t* @private\n\t* @param {(number|null)} code - exit code\n\t* @param {(string|null)} signal - termination signal\n\t* @returns {void}\n\t*/\n\tfunction processExit( code, signal ) {\n\t\tvar error;\n\t\tif ( err ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( code !== null && code !== 0 ) {\n\t\t\terror = new Error( format( 'Child process failed with exit code: `%u`.', code ) );\n\t\t} else if ( signal !== null ) {\n\t\t\terror = new Error( format( 'Child process failed due to termination signal: `%s`.', signal ) );\n\t\t}\n\t\tif ( error ) {\n\t\t\terror.code = code;\n\t\t\terror.signal = signal;\n\t\t\treturn close( error );\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once all tasks are finished.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction done() {\n\t\tif ( err ) {\n\t\t\treturn clbk( err );\n\t\t}\n\t\tclbk();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = exec;\n","export default '/home/runner/work/utils-parallel/utils-parallel/lib/node'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar exec = require( './exec.js' );\n\n\n// EXPORTS //\n\nmodule.exports = exec;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar path = require( 'path' );\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar copy = require( '@stdlib/utils-copy' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar exec = require( './node' );\n\n\n// MAIN //\n\n/**\n* Executes scripts in parallel.\n*\n* @param {StringArray} files - script file paths\n* @param {Options} [options] - function options\n* @param {string} [options.cmd='node'] - executable file/command\n* @param {PositiveInteger} [options.concurrency] - number of scripts to execute concurrently\n* @param {PositiveInteger} [options.workers] - number of workers\n* @param {boolean} [options.ordered=false] - boolean indicating whether to preserve the order of script output\n* @param {NonNegativeInteger} [options.uid] - process user identity\n* @param {NonNegativeInteger} [options.gid] - process group identity\n* @param {NonNegativeInteger} [options.maxBuffer=200*1024*1024] - max child process `stdio` buffer size\n* @param {Callback} clbk - callback to invoke after executing all scripts\n* @throws {TypeError} first argument must be a string array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var files = [ './a.js', './b.js ' ];\n*\n* var opts = {\n*     'workers': 3,\n*     'concurrency': 3\n* };\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* parallel( files, opts, done );\n*/\nfunction parallel() {\n\tvar options;\n\tvar files;\n\tvar opts;\n\tvar clbk;\n\tvar err;\n\tvar dir;\n\tvar i;\n\n\tfiles = arguments[ 0 ];\n\tif ( !isStringArray( files ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', files ) );\n\t}\n\tfiles = files.slice();\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\toptions = arguments[ 1 ];\n\t\tclbk = arguments[ 2 ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tclbk = arguments[ 1 ];\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\t// Prevent the number of concurrent scripts exceeding the number of actual scripts to run.\n\tif ( opts.concurrency > files.length ) {\n\t\topts.concurrency = files.length;\n\t}\n\t// Prevent the number of workers exceeding the number of concurrent scripts (excess capacity), as some workers would never be allocated scripts to run and always be idle.\n\tif ( opts.workers > opts.concurrency ) {\n\t\topts.workers = opts.concurrency;\n\t}\n\t// Resolve any relative paths to absolute paths...\n\tdir = cwd();\n\tfor ( i = 0; i < files.length; i++ ) {\n\t\tfiles[ i ] = path.resolve( dir, files[ i ] );\n\t}\n\texec( files, opts, done );\n\n\t/**\n\t* Callback invoked after executing all scripts.\n\t*\n\t* @private\n\t* @param {Error} error - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tif ( error ) {\n\t\t\treturn clbk( error );\n\t\t}\n\t\tclbk();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = parallel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Execute scripts in parallel.\n*\n* @module @stdlib/utils-parallel\n*\n* @example\n* var parallel = require( '@stdlib/utils-parallel' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n* var files = [ './a.js', './b.js' ];\n* parallel( files, done );\n*/\n\n// MODULES //\n\nvar parallel = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = parallel;\n"],"names":["numCPUs","require$$0","defaults","workers","concurrency","cmd","ordered","uid","gid","encoding","maxBuffer","defaults_1","isObject","hasOwnProp","require$$1","isPositiveInteger","require$$2","isPrimitive","isNonNegativeInteger","require$$3","isBoolean","require$$4","isString","require$$5","format","require$$6","validate_1","opts","options","TypeError","fork","require","path","logger","objectKeys","getOpts","debug","WORKER_FILEPATH","resolve","module","exports","files","clbk","numClosed","pending","fopts","args","proc","pids","pid","idx","err","i","JSON","stringify","on","onError","onClose","onExit","onDisconnect","onMessage","length","next","child","numPending","close","send","filepath","code","signal","processExit","done","error","message","Error","node","isStringArray","primitives","isFunction","cwd","copy","validate","require$$7","exec","require$$8","lib","dir","arguments","slice"],"mappings":"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"}